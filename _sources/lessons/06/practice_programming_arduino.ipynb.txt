{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Lesson 6: Practice programming Arduino\n",
    "\n",
    "<hr>"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "In this lesson, we will practice using the programming techniques we learned in [the previous lesson](../05/programming_arduino.ipynb). I advise keeping that window open for reference as you work through this lesson, which mostly consists of practice.\n",
    "\n",
    "To further demonstrate how software allows for rapid prototyping, we will use exactly the same physical setup, at least to begin with, as we used in the blink exercise.\n",
    "\n",
    "<div style=\"width: 600px; margin: auto;\">\n",
    "    \n",
    "![Blink breadboard for lesson 6](blink_bb.svg)\n",
    "    \n",
    "</div>"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<hr>\n",
    "\n",
    "## Follow-along exercise 2: Alien contact\n",
    "\n",
    "Now that we have the pieces of the language in place, let's put them to use!\n",
    "\n",
    "In the 1997 film *Contact* (based on the Carl Sagan book of the same name), alien beings from the Vega star system make contact with people on Earth. They do it by sending a sequence of prime numbers. You can see the discovery in [this video](https://www.youtube.com/watch?v=GZDT-FsO9Uc). In the video, the aliens send the prime numbers as pulses one second apart, with a two-second pause between primes. After they get to 101, they pause for 43 seconds, and then send prime numbers again, starting at 2.\n",
    "\n",
    "Our task now is to use the same setup we had for our blink exercise to make the LED flash the prime numbers like the aliens did in the movie. We do not need to change the board configuration, only the code.\n",
    "\n",
    "The following Arduino code accomplishes the extraterrestrial communication.\n",
    "\n",
    "```arduino\n",
    "// Set pin 6 as pin controlling LED\n",
    "const int ledPin = 6;\n",
    "\n",
    "// List of all primes up to and including 101\n",
    "const int nPrimes = 26;\n",
    "const int primes[nPrimes] = {\n",
    "  2, 3, 5, 7, 11, 13, 17, 19, 23, \n",
    "  29, 31, 37, 41, 43, 47, 53, 59, \n",
    "  61, 67, 71, 73, 79, 83, 89, 97, 101\n",
    "};\n",
    "\n",
    "\n",
    "void flash(int ledPin) {\n",
    "  /*\n",
    "   * Flash the LED over one second.\n",
    "   */\n",
    "   \n",
    "  digitalWrite(ledPin, HIGH);\n",
    "  delay(500);\n",
    "  digitalWrite(ledPin, LOW);\n",
    "  delay(500);\n",
    "}\n",
    "\n",
    "\n",
    "void flashSequence(int ledPin, int nFlashes) {\n",
    "  /*\n",
    "   * Flash the LED nFlashes times, with one second per flash.\n",
    "   */ \n",
    "   \n",
    "  for (int i = 0; i < nFlashes; i++) flash(ledPin);\n",
    "}\n",
    "\n",
    "\n",
    "void setup() {\n",
    "  // LED pin is output\n",
    "  pinMode(ledPin, OUTPUT);\n",
    "}\n",
    "\n",
    "\n",
    "void loop() {\n",
    "  // Loop through each prime\n",
    "  for (int i = 0; i < nPrimes; i++) {\n",
    "    // Flash prime number of times\n",
    "    flashSequence(ledPin, primes[i]);\n",
    "\n",
    "    // Wait two seconds until the next prime\n",
    "    delay(2000);\n",
    "  }\n",
    "\n",
    "  // Wait 43 seconds until transmitting again, just like in the movie\n",
    "  delay(43000);\n",
    "}\n",
    "```"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Everything in this sketch could be constructed from the notes in [Lesson 5](../05/programming_arduino.ipynb). Please carefully read it and make sure you understand it. Then, upload it to the Arduino Uno, and send your LED signals just like the aliens!\n",
    "\n",
    "There is no need to turn in this follow-along exercise, since you will expand upon it momentarily in a do-it-yourself exercise.\n",
    "\n",
    "<hr>"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Do-it-yourself exercise 1: Alien contact with audio\n",
    "\n",
    "A [piezo buzzer](https://en.wikipedia.org/wiki/Piezoelectric_speaker) is a device that can make sound by varying an electric field around a sheet of piezoelectic material. Piezoelectrics undergo mechanical deformations in response to accumulation of electric charge. By varying the voltage periodically, the sheet vibrates in the piezo buzzer, producing sound.\n",
    "\n",
    "1. You should have at least one piezo buzzer in your kit. It is black and disk-shaped. Add it to your set up. Be sure to connect one pin to a digital pin of the Arduino and the other to ground using jumper wire (you do not need resistors).\n",
    "2. Update your code such that the buzzer is buzzing when the LED is on. *Hint*: Read the documentation in the Arduino language reference about the `tone()` and `noTone()` functions. *Another hint*: You need to choose a frequency for the buzzer. Middle C is 262 Hz.\n",
    "\n",
    "Now, put the device in action!\n",
    "\n",
    "This is the first exercise you will submit. Remember to submit your exercise as a ZIP file according to the [course policies](policies.rst). \n",
    "\n",
    "<hr>"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Do-it-yourself exercise 2: A proper Hello, world.\n",
    "\n",
    "Our \"Hello, world.\" exercise was Blink. But let's properly say \"Hello, world.\" Leaving your physical setup the same as in the previous exercise, saw \"Hello, world.\" with [Morse code](https://en.wikipedia.org/wiki/Morse_code). Your light and piezo buzzer should be activated at the same time so that the Morse code message is received both visually and audibly.\n",
    "\n",
    "Here are some rules for Morse code.\n",
    "\n",
    "1. The unit of time is a dot duration. I suggest using 60 milliseconds, which is common.\n",
    "2. A letter or punctuation is comprised of one or more dots-and-dashes in succession.\n",
    "3. A dot lasts, you guessed it, one dot duration.\n",
    "4. A dash lasts three times as long as a dot.\n",
    "5. Each dot and dash in a letter or punctuation mark is separated by one dot duration.\n",
    "6. A pause equal to three dot durations is used between letters in a word.\n",
    "7. A pause equal to seven dot durations is used between words.\n",
    "\n",
    "The following aligned arrays give characters and their corresponding Morse code representations.\n",
    "\n",
    "```arduino\n",
    "const String characters = String(\"ABCDEFGHIJKLMNOPQRSTUVWXYZ,.\");\n",
    "\n",
    "const String codes[28] = {\n",
    "  \".-\", \n",
    "  \"-...\", \n",
    "  \"-.-.\", \n",
    "  \"-..\", \n",
    "  \".\", \n",
    "  \"..-.\",\n",
    "  \"--.\", \n",
    "  \"....\",\n",
    "  \"..\", \n",
    "  \".---\", \n",
    "  \"-.-\", \n",
    "  \".-..\", \n",
    "  \"--\", \n",
    "  \"-.\", \n",
    "  \"---\", \n",
    "  \".--.\", \n",
    "  \"--.-\", \n",
    "  \".-.\", \n",
    "  \"...\",\n",
    "  \"-\", \n",
    "  \"..-\", \n",
    "  \"...-\", \n",
    "  \".--\", \n",
    "  \"-..-\", \n",
    "  \"-.--\", \n",
    "  \"--..\", \n",
    "  \"--..--\", \n",
    "  \".-.-.-\"\n",
    "};\n",
    "```\n",
    "\n",
    "This exercise is a bit more challenging, and I suspect you will want to refer to the Aduino language reference as you go through, in particular looking up which useful methods are available for `String` instances.\n",
    "\n",
    "When you submit this exercise, you do not need to show a schematic, since this schematic is the same as in the previous exercise.\n",
    "\n",
    "<hr>"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.3"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
